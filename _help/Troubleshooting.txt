- Make sure your switch (the hardware) isn't forwarding incoming BPDUs between ports. It must only forward BPDUs to the microcontroller running the STP.


- Make sure your switch (the hardware) isn't broadcasting to all ports the BPDUs generated by the STP library.


- Make sure your application is getting the incoming BPDUs. From your last mail I understand that the STP library works correctly while it is sending BPDUs (while it is the root), but isn't working right while the Cisco is sending BPDUs (while Cisco is the root). There's a possiblity your application isn't getting the incoming BPDUs.


- Make sure you're correctly stripping the headers of the received BPDU frames (the VLAN tag should be striped too, if any).


- Make sure you're not flooding the Ethernet communication driver of your device with incoming frames, from the office network for instance. This leads to BPDU loss, and then to STP malfunction. This was especially a problem for me in the early development stages of my Ethernet driver for LPC2000.


- If you use IP-based communication to check connectivity to your device, make sure you flush the ARP table and send "gratuituous" ARPs whenever connectivity changes (forwarding and/or learning enabled/disabled on any port by STP). I am improving this in the new version of the library.


- I don't know what Cisco switches you have there, but play a bit with the STP-related options. I once had some Cisco switches that sometimes wouldn't work with my devices, without any logic that I could see. The problem was some RSTP-related setting ("portfast" i.i.r.c.) which was conflicting with the RSTP functionality.


- I don't know what compiler you're using, but make sure everything is byte-aligned in base_types.h and bpdu.h. The way I wrote that code, everything ends up byte-aligned on IAR and on VC++, but I'm not sure about other compilers. 